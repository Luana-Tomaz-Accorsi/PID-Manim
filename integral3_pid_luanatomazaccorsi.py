# -*- coding: utf-8 -*-
"""Integral3_PID_LuanaTomazAccorsi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1guE0KWrG9EHZhGRlnUcRuJQXH9IDkqjx
"""

#Realizado por Luana Tomaz Accorsi
#e-mail: luana.tomaza@gmail.com
from manim import *

class IntegralArea(Scene):

    def construct(self):

         #definiçao de função que retorna uma linha vertical entre duas funções function1 e function2 e os dois pontos de interseção entre essa reta e as curvas.
        def get_vertical_line_to_graph(axes, function1, function2, x, width, color):
            result=VGroup()
            line = Line(
                start=axes.c2p(x, function1.underlying_function(x)),
                end=axes.c2p(x, function2.underlying_function(x)),
                stroke_width=width,
                stroke_color=color,
            )
            dot1=Dot().set_color(color).move_to(axes.c2p(x, function1.underlying_function(x)))
            dot2=Dot().set_color(color).move_to(axes.c2p(x, function2.underlying_function(x)))
            result.add(line, dot1, dot2)
            return result

        #tentativa
        def get_horizontal_line_to_graph(axes, function11, function22, y, width, color):
            result_1=VGroup()
            line_1 = Line(
                start=axes.c2p(function11.underlying_function(y),y),
                end=axes.c2p(function22.underlying_function(y),y),
                stroke_width=width,
                stroke_color=color,
            )
            dot11=Dot().set_color(color).move_to(axes.c2p(function11.underlying_function(y),y))
            dot22=Dot().set_color(color).move_to(axes.c2p(function22.underlying_function(y),y))
            result_1.add(line_1, dot11, dot22)
            return result_1

        #continuacao do que estava certo

        eixos = Axes(
            #intervalo dos eixos
            x_range=[-2.5,2.5],
            y_range=[-1,3],
           #inclusão dos números visualmente
            x_axis_config={"numbers_to_include":(-2,2), "font_size":60},
            y_axis_config={"numbers_to_include":(0,2),"font_size":60}
        )

        labels = eixos.get_axis_labels()



        #colocação da equação (-x)**0.5
        curve_1 = eixos.plot(lambda x:-x, x_range=[-2.5, 2], color=YELLOW)
        curve_0_1 = eixos.plot(lambda x: x, x_range=[-2.5,2], color = YELLOW)
        curva_auxiliar= eixos.plot(lambda x: 2-x **2, x_range=[0, 4.5,0.01], color=ORANGE)
        curve_2 = eixos.plot(
            lambda x:(-x+2)** 0.5,
            x_range=[-2.5,2,0.01],
            color=GREEN,
        )

        curve_3 = eixos.plot(
            lambda x:-(-x+2)** 0.5,
            x_range=[-2.5,2,0.01],
            color=GREEN,
        )

        curve2 = eixos.plot(lambda x: -x ** 0.5, x_range=[0, 4.5,0.01], color=ORANGE)
        curve3 = eixos.plot(lambda x: x ** 0.5, x_range=[0, 4.5,0.01], color=ORANGE)
        curve4=curve2.copy().rotate(about_point=[0,0,0],axis=np.array([0.,1.,0.]),angle=PI)
        curve5=curve3.copy().rotate(about_point=[0,0,0],axis=np.array([0.,1.,0.]),angle=PI)

         #enunciado
        titulo=MathTex(r"\textrm{Determine o valor da área definida, acima do eixo } x \textrm{,  }",font_size=45).move_to(point_or_mobject=[0,1,0])
        titulo_1=MathTex(r"\textrm{entre as curvas} \,\, x = -y \, \, \, \, \textrm{e} \, \,   \,\,  x = 2 -y^2.     ",font_size=45).move_to(point_or_mobject=[0,0,0])

        #legenda curvas
        c=MathTex(r" y", color = YELLOW, font_size=45).move_to(point_or_mobject=[5,1,0])
        c1=MathTex(r" -y", color = YELLOW, font_size=45).move_to(point_or_mobject=[-4.5,0.8,0])
        c3=MathTex(r" y^2", color = ORANGE, font_size=45).move_to(point_or_mobject=[3,1,0])
        c4=MathTex(r"  -y^2", color = ORANGE, font_size=45).move_to(point_or_mobject=[-3,1,0])
        c5=MathTex(r"  2 -y^2", color = ORANGE, font_size=45).move_to(point_or_mobject=[-4.2,2,0])


        #arrumando equações

        a1=MathTex(r" x = -y",font_size=35).move_to(point_or_mobject=[2,-1,0])
        a2=MathTex(r" y = -x",color = GREEN, font_size=35)
        #a3=MathTex(r" f(x) = -x",color=GREEN, font_size=35)
        b1=MathTex(r" x = 2 - y^2",font_size=35).move_to(point_or_mobject=[2,-1,0])
        b2=MathTex(r"-y^2 = x - 2  ",font_size=35)
        b3=MathTex(r"  y^2 = -x + 2 ",font_size=35)
        b4=MathTex(r" y = \, \pm \, \,  \sqrt[]{-x+2} ",font_size=35, color=GREEN)

        a_grupo=VGroup(a1,a2)
        a_grupo.arrange(1*DOWN,center=False, aligned_edge=LEFT)
        b_grupo=VGroup(b1,b2,b3,b4)
        b_grupo.arrange(1*DOWN,center=False, aligned_edge=LEFT)



        texto2=MathTex(r" \textrm{Curvas: } f(y)=-y \, \, \, \textrm{e} \, \, \, g(y) = 2 -  y^2.",font_size=37).move_to(point_or_mobject=[0,3.7,0])


        #area
        area = eixos.get_area(curve_1, [-2, 0], bounded_graph=curve_2, color=PURPLE, opacity=0.5)
        area1 = eixos.get_area(curve_2, [0, 2], color=PURPLE, opacity=0.5)


        #grupo gráfico
        f=MathTex(r" -y", color = YELLOW, font_size=60).move_to(point_or_mobject=[-4.5,0.8,0])
        g=MathTex(r" 2-y^2", color = ORANGE, font_size=60).move_to(point_or_mobject=[-4,2.5,0])
        vg=VGroup(eixos,labels,curve_1,curve_2,curve_3,curve4,curve5,f,g,area,area1)


        #integral em x
        i=MathTex(r"\textrm{Integral em } \, x \textrm{:} ",font_size=40).move_to(point_or_mobject=[2.3,2.75,0])

        i2=MathTex(r" \int_{-2}^{0} ", r" \, (",  r"\sqrt[]{-x+2} ", r"-",r" (-x) ", r" \, )",  r" \, ) \, dx", r"\, + \,  \int_{0}^{2} (", r"\sqrt[]{-x+2} \, ) \,dx =", font_size=32)
        i3=MathTex(r" \int_{-2}^{0} ", r" \, (",  r"\sqrt[]{-x+2} ", r" + x \, ) \, dx ", r"\, + \,  \int_{0}^{2} (", r"\sqrt[]{-x+2} ) \, dx =",font_size=32)
        i4=MathTex(r"  \, \bigg (  \, \frac{2(-x+2)^{3/2}}{3}  \,   + \,  \frac{x^2}{2} \, \bigg )  \, \bigg \arrowvert_{-2}^0  \, +  \frac{2(-x+2)^{3/2}}{3}\bigg \arrowvert_{0}^2  = ", font_size=32)
        i5=MathTex(r" \frac{16-4 \ \sqrt[]{2}}{3}-2 \, + \, \frac{4 \, \sqrt[]{2}}{3} \, = \,", r"\frac{10}{3}",  font_size=32)


        ajudinha=MathTex(r" \int_{a}^{b} ", r" ( \, ",r"(\textrm{função de cima}) ", r"-",r" (\textrm{função de baixo}) ",r" )", r" \, dx =",font_size=32).move_to(point_or_mobject=[2.9,2,0])


        i_grupo=VGroup(ajudinha,i2,i3,i4,i5)
        i_grupo.arrange(2*DOWN,center=False, aligned_edge=LEFT)





        #integral em y
        in1=MathTex(r"\textrm{Integral em } \, y \textrm{:} ",font_size=40).move_to(point_or_mobject=[3,2,0])
        in3 =MathTex(r" \int_{0}^{2} ( ", r"2-y^2", r" \,  -  \, ", r"(-y) \, ", r") \, dy =",font_size=35).move_to(point_or_mobject=[2.5,0,0])
        in4 =MathTex(r" \int_{0}^{2} (\, ", r"2-y^2", r" \,  +  \, ", r"y ) \, dy =",font_size=35)
        in5=MathTex(r"\bigg (  \, 2y -  \frac{y^3}{3}  + \frac{y^2}{2} \bigg) \bigg \arrowvert_{0}^2 \, = ",r" \frac{10}{3}", font_size=35)
        ajudinha2=MathTex(r" \int_{c}^{d} ", r" ( \, ",r"(\textrm{função da direita}) ", r"-",r" (\textrm{função da esquerda}) ",r" )", r" \, dy =",font_size=32).move_to(point_or_mobject=[2.8,1,0])

        in_grupo=VGroup(in3,in4,in5)
        in_grupo.arrange(1.5*DOWN,center=False, aligned_edge=LEFT)










        #execução
        self.add(titulo, titulo_1)
        self.wait()
        self.play(FadeOut(titulo),FadeOut(titulo_1))
        self.add(texto2)
        self.add(eixos, labels)
        self.wait(2)


        self.add(curve_0_1,c)
        self.wait(2)




        self.play(ReplacementTransform(curve_0_1,curve_1),ReplacementTransform(c,c1))
        self.wait(2)
        self.add(curve2,curve3,c3)


        self.wait(3)


        self.play(FadeOut(c3))

        self.play(ReplacementTransform(curve3,curve5),ReplacementTransform(curve2,curve4))
        self.add(c4)
        self.wait(2)
        self.play(FadeOut(c4))
        # código para mover as curvas de -y^2 2 unidades para a direita.
        self.play(curve4.animate.shift(eixos.c2p(2,1)), curve5.animate.shift(eixos.c2p(2,1))) #aqui o c2p(2,1) precisa ter o valor 1 pois o centro do sistema de coordenadas está deslocado 1 unidade para baixo.
        self.add(c5)

        #self.play(ReplacementTransform(c4,c5))
        self.wait(3)
        self.add(area,area1)


        self.wait(3)
        k = ValueTracker(-2)

        # definição da reta entre as curvas curve_1 e curve_2.
        moving_v_line = always_redraw(
            lambda: get_vertical_line_to_graph(
                axes=eixos, function1=curve_1, function2=curve_2, x=k.get_value(), width=4, color=GREEN
            )
        )

        self.play(FadeIn(moving_v_line)) # adicionar a reta na cena (somente essa linha não faz nada)
        self.play(k.animate.set_value(0), run_time=4, rate_func=smooth) #essa linha é a responsável pela animação, fazendo k variar de -2 definido acima até 0.
        self.play(FadeOut(moving_v_line)) #remove essa reta
        # definindo a função y=0 para definir a reta da segunda parte da animação
        curve_nula = eixos.plot(
            lambda x:0,
            x_range=[-2.5,2,0.01],
            color=GREEN,
        )
        k.set_value(0)
        # definição da reta entre as curvas curve_nule e curve_2.
        moving_v_line2 = always_redraw(
            lambda: get_vertical_line_to_graph(
                axes=eixos, function1=curve_nula, function2=curve_2, x=k.get_value(), width=4, color=GREEN
            )
        )
        self.play(FadeIn(moving_v_line2))# adicionar a reta na cena (somente essa linha não faz nada)
        self.play(k.animate.set_value(2), run_time=4, rate_func=smooth)#essa linha é a responsável pela animação, fazendo k variar de 0 (seu valor atual depois do comando animate acima) até 2.
        self.play(FadeOut(moving_v_line2)) #remove essa reta
        self.wait(3)



        #tentativas
        q = ValueTracker(0)

       # definição da reta entre as curvas .
        moving_v_line3=always_redraw(
            lambda: get_horizontal_line_to_graph(
                axes=eixos, function11=curva_auxiliar, function22=curve_1, y=q.get_value(), width=4, color=GREEN
                #curve4 não entra, pois é a parte que não está dentro do que queremos
            )
        )
        self.play(FadeIn(moving_v_line3))# adicionar a reta na cena (somente essa linha não faz nada)
        self.play(q.animate.set_value(2), run_time=4, rate_func=smooth)#essa linha é a responsável pela animação
        self.wait(2)
        self.play(FadeOut(moving_v_line3))
        self.wait(1)
        self.play(FadeOut(c1),FadeOut(c5))






        #continuacao do que estava certo
        vg.shift(3.7*LEFT).height=3.5
        self.add(f,g)

        self.play(Write(i),Write(ajudinha))
        self.wait(2)

        self.play(Write(i2[0]))
        self.play(Circumscribe(ajudinha[2], color=ORANGE))
        self.play(Circumscribe(g, color=ORANGE))
        self.play(Write(b1))
        self.wait(3)
        self.play(Write(b2))
        self.wait(3)
        self.play(Write(b3))
        self.wait(3)
        self.play(Write(b4))
        self.wait(3)

        self.play(Write(i2[1]))
        self.wait()
        self.play(FadeOut(b1), FadeOut(b2), FadeOut(b3), FadeOut(b4))
        self.play(Write(i2[2]),Write(i2[3]))
        self.play(Circumscribe(ajudinha[4], color=YELLOW))
        self.play(Circumscribe(f, color=YELLOW))
        self.play(Write(a1))
        self.wait(3)
        self.play(Write(a2))
        self.wait(3)

        self.play(Write(i2[4]))
        self.wait()
        self.play(FadeOut(a1),FadeOut(a2))

        self.play(Write(i2[5]),Write(i2[6]))

        self.play(Circumscribe(g, color=ORANGE))
        self.play(Write(i2[7]))
        self.wait()
        self.play(Write(i2[8]))
        self.wait(3)
        self.play(Write(i3))
        self.wait(3)
        self.play(Write(i4))
        self.wait(3)
        i5[1].set_color(LIGHT_PINK)
        self.play(Write(i5))
        self.wait(4)
        self.play(FadeOut(i),FadeOut(i2),FadeOut(i3),FadeOut(i4),FadeOut(i5), FadeOut(ajudinha))



        self.play(Write(in1),Write(ajudinha2))
        self.wait()

        self.play(Write(in3[0]))
        self.play(Circumscribe(ajudinha2[2], color=ORANGE))
        self.play(Circumscribe(g, color=ORANGE))
        self.play(Write(in3[1]))
        self.wait()
        self.play(Write(in3[2]))
        self.play(Circumscribe(ajudinha2[4], color=YELLOW))
        self.play(Circumscribe(f, color=YELLOW))
        self.play(Write(in3[3]),Write(in3[4]))
        self.wait(3)
        self.play(Write(in4))
        self.wait(3)
        in5[1].set_color(LIGHT_PINK)
        self.play(Write(in5))
        self.wait(5)