# -*- coding: utf-8 -*-
"""Integral1-PID_LuanaTomazAccorsi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uTR7c9RojkWxIMsqCYFBbPAwlUOnoCK9
"""

#Realizado por Luana Tomaz Accorsi
#e-mail: luana.tomaza@gmail.com


from manim import *
class IntegralArea(Scene):
    def construct(self):
        #definiçao de função que retorna uma linha vertical entre duas funções function1 e function2 e os dois pontos de interseção entre essa reta e as curvas.
        def get_vertical_line_to_graph(axes, function1, function2, x, width, color):
            result=VGroup()
            line = Line(
                start=axes.c2p(x, function1.underlying_function(x)),
                end=axes.c2p(x, function2.underlying_function(x)),
                stroke_width=width,
                stroke_color=color,
            )
            dot1=Dot().set_color(color).move_to(axes.c2p(x, function1.underlying_function(x)))
            dot2=Dot().set_color(color).move_to(axes.c2p(x, function2.underlying_function(x)))
            result.add(line, dot1, dot2)
            return result




        #criacao dos eixos
        eixos = Axes(
            #intervalo dos eixos
            x_range=[0,2.5],
            y_range=[-1,2],
           #inclusão dos números visualmente
            x_axis_config={"numbers_to_include":(1,2), "font_size":60},
            y_axis_config={"numbers_to_include":(-1,1),"font_size":60}
        )

        labels = eixos.get_axis_labels()

        #colocação da equação


        curve_1 = eixos.plot(lambda x: x ** 0.5, x_range=[0, 2.25,0.0001], color=YELLOW)


        curve_0_1 = eixos.plot(lambda x: x, x_range=[0,2.1], color = GREEN)

        curve_2 = eixos.plot(
            lambda x: -0.5 * x,
            x_range=[0,2.25,0.0001],
            color=ORANGE,
        )
        curve_2_0 = eixos.plot(
            lambda x:  x,
            x_range=[0,2.1],
            color=GREEN,
        )
        curve_2_1 = eixos.plot(
            lambda x: 0.5 * x,
            x_range=[0,2.2,0.0001],
            color=GREEN,
        )

        #colocando linha
        line_1 = eixos.get_vertical_line(eixos.input_to_graph_point(2, curve_1), color=WHITE)
        line_2 = eixos.get_vertical_line(eixos.i2gp(1, curve_1), color=WHITE)
        line_3 = eixos.get_vertical_line(eixos.i2gp(2, curve_2), color=WHITE)
        line_4 = eixos.get_vertical_line(eixos.i2gp(1, curve_2), color=WHITE)


        #marcando a área
        area = eixos.get_area(curve_2, [1, 2], bounded_graph=curve_1, color=PURPLE, opacity=0.5)

        #parte texto
        inicio=MathTex(r"\textrm{Determine o valor da área definida entre as curvas} \,",font_size=45).move_to(point_or_mobject=[0,1,0])
        inicio_1=MathTex(r" f(x) \, = \, \sqrt[]{x} \, \, \,  \textrm{e}\, \, \, g(x) \, = \, - \frac{x}{2}\, \, \textrm{no intervalo} \, \, \,  [1,2].",font_size=45).move_to(point_or_mobject=[0,0,0])
        inicio2=MathTex(r"\textrm{A área entre as curvas} \,   \,  \,  f(x) \, = \, \sqrt[]{x} \, \, \,   ",font_size=35).move_to(point_or_mobject=[-3,3.3,0])
        inicio2_2=MathTex(r" \textrm{e} \, \, g(x) \, = \,- \frac{x}{2}\, \,  \textrm{no intervalo} \,  [1,2].",font_size=35).move_to(point_or_mobject=[-1,2.5,0])
        inicio3=MathTex(r"\textrm{A área entre as curvas} \,f(x) \, = \, \sqrt[]{x} \, \, \,  \textrm{e}\, \, \, g(x) \, = \, - \frac{x}{2}\, \, \textrm{no intervalo} \, \, \,  [1,2].",font_size=35).move_to(point_or_mobject=[0,3.5,0])



        f= MathTex(r"  \sqrt[]{x}", color = YELLOW, font_size=45).move_to(point_or_mobject=[-1,2,0])
        f2= MathTex(r"  - \frac{x}{2}", color = ORANGE,font_size=45).move_to(point_or_mobject=[4.8,-2.75,0])
        f_1= MathTex(r"  \sqrt[]{x}", color = YELLOW, font_size=85).move_to(point_or_mobject=[3,3,0])
        f2_2= MathTex(r"  - \frac{x}{2}", color = ORANGE,font_size=85).move_to(point_or_mobject=[3,-4.3,0])
        c_0=MathTex(r" x", color=GREEN,font_size=45).move_to(point_or_mobject=[3.8,2.5,0])
        c_2_2=MathTex(r"\frac{x}{2}", color=GREEN,font_size=45).move_to(point_or_mobject=[4,2,0])




        explic=MathTex(
            r" \textrm{Área} \, : ",color = RED, font_size=45
        ).move_to(point_or_mobject=[3.5,3,0])
        explic1=MathTex(
            r" \int_" , r"a", r"^b ", r" ( \, ", r" f(x) \, ", r" - \, ", r" g(x) \, ", r" ) \, dx =  ",font_size=40
        ).move_to(point_or_mobject=[3,1.8,0])

        explic3_1=MathTex( r" \int_", r"1", r"^2", font_size=40).move_to(point_or_mobject=[2.5,0,0])

        explic3_3=MathTex( r" \bigg ( \, ", r"  {\sqrt[]{x}} \, ",  font_size=40).move_to(point_or_mobject=[2.5,0,0])
        explic3_3_1=MathTex(r"\,- ",font_size=40).move_to(point_or_mobject=[2.5,0,0])
        explic3_4=MathTex( r" \, \bigg ( ", r"\! - \frac{x}{2} ", r" \bigg  )  \bigg ) \, ",font_size=40).move_to(point_or_mobject=[2.5,0,0])
        explic3_5=MathTex( r" dx \, =  ",font_size=40).move_to(point_or_mobject=[2.5,0,0])



        explic5=MathTex(
            r" \frac{4 \, \sqrt[]{2} -2}{3} \,+ \, \frac{3}{4} \, =  ", r"\frac{16 \, \sqrt[]{2}+1}{12} ", font_size=40
        ).move_to(point_or_mobject=[3,0,0])
        result=MathTex(r" \bigg (\frac{2x^{3/2}}{3} \,  + \,  \frac{x^2}{4} \bigg) \bigg \arrowvert_1^2  \, = ", font_size=40).move_to(point_or_mobject=[3,0,0])



        #ponto
        ponto = Dot().move_to(eixos.c2p(1, 0))
        ponto1 = Dot().move_to(eixos.c2p(2, 0))


        #grupo
        vg=VGroup(eixos,labels,curve_1,f_1,curve_2,f2_2,area,
                  ponto,ponto1,line_1,line_2,line_3,line_4)

        ajuda=VGroup(explic1,explic3_1,result,explic5)
        ajuda.arrange(1.6* DOWN,center=False, aligned_edge=LEFT)

        ajuda2=VGroup(explic3_1,explic3_3,explic3_3_1,explic3_4,explic3_5)
        ajuda2.arrange(RIGHT,center=False)

        ajuda1=VGroup(inicio2,inicio2_2)
        ajuda1.arrange(DOWN,center=False, aligned_edge=LEFT)

        #adicionando

        self.add(inicio,inicio_1)
        self.wait(5)
        self.play(FadeOut(inicio,inicio_1))
        self.add(inicio3,eixos, labels)
        self.wait(1)
        self.add(curve_2_0)
        self.add(c_0)
        self.wait(2)
        self.play(ReplacementTransform(curve_2_0,curve_2_1),ReplacementTransform(c_0,c_2_2))
        self.wait()
        self.play(ReplacementTransform(curve_2_1, curve_2),ReplacementTransform(c_2_2,f2))
        self.wait(2)
        self.add(f,curve_1)
        self.wait(2)
        self.add(ponto,ponto1)
        self.wait()
        self.add(line_1,line_2,line_3,line_4)
        self.wait()
        self.add(area)
        self.wait(2)



        k = ValueTracker(1)

        # definição da reta entre as curvas curve_1 e curve_2.
        moving_v_line = always_redraw(
            lambda: get_vertical_line_to_graph(
                axes=eixos, function1=curve_1, function2=curve_2, x=k.get_value(), width=4, color=GREEN
            )
        )

        self.play(FadeIn(moving_v_line)) # adicionar a reta na cena (somente essa linha não faz nada)
        self.play(k.animate.set_value(2), run_time=4, rate_func=smooth) #essa linha é a responsável pela animação, fazendo k variar de 1 definido acima até 2.
        self.play(FadeOut(moving_v_line)) #remove essa reta
        curve_nula = eixos.plot(
            lambda x:1,
            x_range=[-2.5,2,0.01],
            color=GREEN,
        )

        k.set_value(2)

        self.play(FadeOut(f,f2))
        self.play(FadeOut(inicio3))

        self.wait()


        vg.shift(3*LEFT).height=4
        self.add(f_1,f2_2)

        self.add(inicio2,inicio2_2)
        self.wait(2)
        self.add(explic)
        self.wait()
        self.play(Write(explic1))
        self.play(Write(explic3_1))
        self.wait()
        self.play(Circumscribe(explic1[1],color=GREEN))
        self.play(Circumscribe(ponto1,color=GREEN))
        self.play(Circumscribe(explic3_1[1],color=GREEN))
        self.wait()
        self.play(Circumscribe(explic1[2],color=GREEN))
        self.play(Circumscribe(ponto,color=GREEN))
        self.play(Circumscribe(explic3_1[2],color=GREEN))
        self.play(Write(explic3_3[0]))
        self.play(Circumscribe(explic1[4],color=YELLOW))
        self.play(Circumscribe(f_1,color=YELLOW))
        self.play(Write(explic3_3[1]))
        self.wait()
        self.play(Write(explic3_3_1))
        self.play(Circumscribe(explic1[6],color=ORANGE))
        self.play(Circumscribe(f2_2,color=ORANGE))
        self.play(Write(explic3_4))
        self.wait()
        self.play(Write(explic3_5))
        self.play(Write(result))
        explic5[1].set_color(LIGHT_PINK)
        self.play(Write(explic5))
        self.wait(3)